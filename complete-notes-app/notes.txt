MERN stack
create notes with title and description. we have update and delete actions
plus deployment
and rate limiting

first start by Building the API
once everything is working, we start the frontend

create backend and frotend folder
in the backend:
    build the API
        
        initilaize node.js application
            npm init -y
        install express and nodemon
                    npm install nodemon -D
                    in package.json change the script to nodemon instead of node
                    in development we'll use npm run dev which uses nodemon. put once we deploy we'll use npm run start which uses the regular ndoe command
        after i made the very basic crud components with routes and controller folders, i made another folder called src and put everything in there because its convention
            because of this, in the scripts where we run 'npm run dev' and 'npm run start' we have to update it so that is run 'nodemon src/server.js' and 'node src/server.js'
                and for consitency update the "main" in package.json as well (you dont have to but why not)
        install mongoose in the backend directory
        make new folder called config so we can put our connections to the database
            in the server we are going to use it to connect to there
        made .env file under backend folder and added mongo_uri
            install dotenv and require it in server.js
            make sure to add port into the dotenv file as well
        created models folder
            a convention is to name the model with first letter capitalized and singular
        controller functions
        middleware and rate limiting
            app.use in server.js 
            rate limiting  
                a way to control how often someone can do something on a website or app 
                like how many times they can refresh a page or make a request to an API
                100 requests per user every 15 minutes
                status code - 429
                prevents abuse and prevents server getting overwhelmed
                    using upstash for this
                        using redis for rate limiting
                
        using upstash and redis:
            - create database
            - get the enviornment variables:
                UPSTASH_REDIS_REST_URL
                UPSTASH_REDIS_REST_TOKEN
            - install package   
                npm i @upstash/ratelimit @upstash/redis
            - under config create upstash.js
                only a few lines of codes for rate limiting

        created middleware folder
            rateLimiter.js file was created
        
        mounter ratelimiter on server.js

        


in the front end:
    react application