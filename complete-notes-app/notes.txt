MERN stack
create notes with title and description. we have update and delete actions
plus deployment
and rate limiting

first start by Building the API
once everything is working, we start the frontend

create backend and frotend folder

in the backend:
    build the API
        
        initilaize node.js application
            npm init -y
        install express and nodemon
                    npm install nodemon -D
                    in package.json change the script to nodemon instead of node
                    in development we'll use npm run dev which uses nodemon. put once we deploy we'll use npm run start which uses the regular ndoe command
        after i made the very basic crud components with routes and controller folders, i made another folder called src and put everything in there because its convention
            because of this, in the scripts where we run 'npm run dev' and 'npm run start' we have to update it so that is run 'nodemon src/server.js' and 'node src/server.js'
                and for consitency update the "main" in package.json as well (you dont have to but why not)
        install mongoose in the backend directory
        make new folder called config so we can put our connections to the database
            in the server we are going to use it to connect to there
        made .env file under backend folder and added mongo_uri
            install dotenv and require it in server.js
            make sure to add port into the dotenv file as well
        created models folder
            a convention is to name the model with first letter capitalized and singular
        controller functions
        middleware and rate limiting
            app.use in server.js 
            rate limiting  
                a way to control how often someone can do something on a website or app 
                like how many times they can refresh a page or make a request to an API
                100 requests per user every 15 minutes
                status code - 429
                prevents abuse and prevents server getting overwhelmed
                    using upstash for this
                        using redis for rate limiting
                
        using upstash and redis:
            - create database
            - get the enviornment variables:
                UPSTASH_REDIS_REST_URL
                UPSTASH_REDIS_REST_TOKEN
            - install package   
                npm i @upstash/ratelimit @upstash/redis
            - under config create upstash.js
                only a few lines of codes for rate limiting

        created middleware folder
            rateLimiter.js file was created
        
        mounter ratelimiter on server.js

in the front end:
    react application
    npm create vite@latest .
        go with react and js
    npm install
    npm run dev
    we first will set up the pages
        home page, detail page, create page using react router
        npm i react-router
        npm i react-hot-toast 
            ^ for notificaitons
    delete app.css file under /frontend/src/
    and delete the content in index.css and App.jsx
    delete the asseets folder
    get es7 exntension for snippets
    rafce short cut for the snippet in App.jsx
    under main.jsx we will wrap our application with BrowserRouter 
        we import BrowserRouter from react-router
    now we create pages folder under src
    add 3 page .jsx file
    in app.jsx add the routes
    
    now set up react hot toast
        add it in main.jsx
    
    now we set up tailwind css MAKE SURE YOURE USING INSTALL FOR VITE
        npm install -D tailwindcss@3 postcss autoprefixer
        npx tailwindcss init -p

        delete the entire content of the tailwind.config.js file
            and paste in the one from the documentation
        and update index.css file with the one from tailwind docs
    now we setting up daisyui 
        daisyui.com
        tailwind css library - very useful
        npm i -D daisyui@4.12.24        
        add it to tailwind.config.js plugins
        under tailwind.config.js add daisyui and theme under that, and add the array of themes you want
        in app.jsk add data-theme to the div wrapping everything
    npm i lucide-react
        for icons
    npm i axios 
        for replace fetch api with this
    
    created components folder   
        created Navbar.jsx file
            created navbar
        created a ratelimited ui

    finally working on HomePage.jsx
        import navbar at top
        created a state before the return for the rate limiting
            import use state
        created state for notes and loading
            *** learn more about usestate and useEffect ***
        create useEffect
            to fetch it
        using axios to actually fetch it
        have to fix the CORS error
            cross-origin resource sharing
                CORS is a brower security ryle
                when a website tries to get data from another website - like front end calling an api on a different domain -
                    the browser might block it for security reasons
            in backend/.../server.js add middlware
                npm i cors
                    in the backend folder
                cors should be above ratelimiter
        
        now actually displaying the notes
        create notes card under components
        created lib and utils.js file for date and time for the note

    working on CreatePage.jsx
        created container for Create New note
        used form to handle input data (with the value thing)
        created handleSubmit function to handle submit
            it refreshed every time so we have to get the event and prevent default behavior 
            now we gonna send the request 
                have some validation
            use axios to post
